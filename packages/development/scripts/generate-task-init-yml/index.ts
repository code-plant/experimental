import { globSync, readFileSync, writeFileSync } from "fs";

const packages = globSync("../../../*/*/*/package.json").sort();
const nodes = packages.map((p) => {
  const json = JSON.parse(readFileSync(p).toString());
  const dependencies = Object.keys(json.dependencies ?? {})
    .concat(Object.keys(json.devDependencies ?? {}))
    .filter((d) => d.startsWith("@this-project/"))
    .map((d) => {
      const [, a] = d.match(/^@this-project\/(.*)$/)!;
      return a;
    });
  const [, a] = json.name.match(/^@this-project\/(.*)$/)!;
  const name = a;
  const [, b, c, d] = p
    .replace(/\\/g, "/")
    .match(/^.*\/([^\/]*)\/([^\/]*)\/([^\/]*)\/([^\/]*)$/)!;
  const path = `packages/${b}/${c}/${d}`;
  return {
    name,
    path,
    dependencies,
  };
});

const output = nodes.map(
  (n) => `  init-${n.name}:
    desc: Initialize ${n.path}
    deps: [${n.dependencies.map((d) => `init-${d}`).join(", ")}]
    cmds:
      - (cd ${n.path} && npm install)
      - (cd ${n.path} && npm run build)
    run: once
`
);

writeFileSync(
  "../../../../task/init.yml",
  `# This file is generated by generate-task-init-yml. Do not edit it directly.

version: '3'

tasks:
  init:
    desc: Initialize all packages
    deps: [${nodes.map((n) => `init-${n.name}`).join(", ")}]
    run: once

${output.join("")}`
);
